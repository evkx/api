@using evdb.Models;
@using evdb.models.Enums;
@using evdb.models.Models;
@using evkxapi.Helpers;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model evkxapi.Models.EvCompareViewModel

<!doctype html>
<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <title>Compare models EVKX.net</title>
</head>
<body>
    <img src="https://evkx.net/images/evkxlogo_s.png" />
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                @foreach (EV ev in Model.Models)
                {
                    <th scope="col">@ev.Brand.Name @ev.ModelInfo.Variant</th>
                }
           </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">Type</th>
                @foreach (EV ev in Model.Models)
                {
                    if (ev.ModelPictures.Any())
                    {
                        CloudMedia? media = ev.ModelPictures.FirstOrDefault(p => p.ExternalUrl != null && p.ExternalUrl.Contains("main_1"));
                        if (media != null && media.ExternalUrl != null)
                        {
                            <td scope="col">
                               <img src="@media.ExternalUrl.Replace("main_1", "main_1_xst")" class="img-thumbnail" alt="" width="200">
                            </td>
                        }
                    }

                }
            </tr>
            <tr>
                <th scope="row">Type</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.ModelInfo.BodyType</td>
                }
            </tr>
            <tr>
                <th scope="row">World premiere</th>
                @foreach (EV ev in Model.Models)
                {
                    if (ev.ModelInfo?.WorldPremiere != null)
                    {
                        <td scope="col">@ev.ModelInfo.WorldPremiere</td>
                    }
                    else
                    {
                        <td scope="col"></td>
                    }
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Range And Consumption</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">WLTP range</th>
                @foreach (EV ev in Model.Models)
                {
                    foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                    {

                        if (range.BasicTrimWltpRange != null && range.TopTrimWltpRange != null && range.BasicTrimWltpRange != range.TopTrimWltpRange)
                        {
                            <td scope="col">@range.BasicTrimWltpRange - @range.TopTrimWltpRange km (@Decimal.Round(EvConversion.ToMilesFromKph(range.BasicTrimWltpRange).Value,0) - @Decimal.Round(EvConversion.ToMilesFromKph(range.TopTrimWltpRange).Value,0) miles)</td>
                        }
                        else if (range.BasicTrimWltpRange != null && range.TopTrimWltpRange != null && range.BasicTrimWltpRange == range.TopTrimWltpRange)
                        {
                            <td scope="col">@range.BasicTrimWltpRange km  (@Decimal.Round(EvConversion.ToMilesFromKph(range.BasicTrimWltpRange).Value,0) miles)</td>
                        }
                        else
                        {
                            <td scope="col"></td>
                        }
                    }

                }
            </tr>
            <tr>
                <th scope="row">WLTP consumption</th>
                @foreach (EV ev in Model.Models)
                {
                    foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                    {
                        if (range.BasicTrimRealWltpConsumption != null && range.TopTrimRealWltpConsumption != null && range.BasicTrimRealWltpConsumption != range.TopTrimRealWltpConsumption)
                        {
                            <td scope="col">@Decimal.Round(range.BasicTrimRealWltpConsumption.Value,2) - @Decimal.Round(range.TopTrimRealWltpConsumption.Value,2) kWh/100km (@Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimRealWltpConsumption.Value).Value,1) - @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.TopTrimRealWltpConsumption.Value).Value,1) mi/kWh) </td>
                        }
                        else if (range.BasicTrimRealWltpConsumption != null && range.TopTrimRealWltpConsumption != null && range.BasicTrimRealWltpConsumption == range.TopTrimRealWltpConsumption)
                        {
                            <td scope="col">@Decimal.Round(range.BasicTrimRealWltpConsumption.Value,2) kWh/100km (@Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimRealWltpConsumption.Value).Value,1) mi/kWh)</td>
                        }
                        else
                        {
                            <td scope="col"></td>
                        }
                    }
                }
            </tr>
            <tr>
                <th scope="row">EPA range</th>
                @foreach (EV ev in Model.Models)
                {
                    foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                    {

                        if (range.BasicTrimEpaRange != null && range.TopTrimEpaRange != null && range.BasicTrimEpaRange != range.TopTrimEpaRange)
                        {
                            <td scope="col">@range.BasicTrimEpaRange - @range.TopTrimEpaRange miles  (@Decimal.Round(EvConversion.ToKmFromMiles(range.BasicTrimWltpRange).Value,0) - @Decimal.Round(EvConversion.ToKmFromMiles(range.TopTrimWltpRange).Value,0) km) </td>
                        }
                        else if (range.BasicTrimEpaRange != null && range.TopTrimEpaRange != null && range.BasicTrimEpaRange == range.TopTrimEpaRange)
                        {
                            <td scope="col">@range.BasicTrimEpaRange miles (@Decimal.Round(EvConversion.ToKmFromMiles(range.BasicTrimEpaRange).Value,0) km)</td>
                        }
                        else
                        {
                            <td scope="col"></td>
                        }
                    }

                }
            </tr>
            <tr>
                <th scope="row">EPA consumption</th>
                @foreach (EV ev in Model.Models)
                {
                    foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                    {
                        if (range.BasicTrimEpaRealConsumption != null && range.TopTrimEpaRealConsumption != null && range.BasicTrimEpaRealConsumption != range.TopTrimEpaRealConsumption)
                        {
                            <td scope="col">@Decimal.Round(range.BasicTrimEpaRealConsumption.Value,2) - @Decimal.Round(range.TopTrimEpaRealConsumption.Value,2) kWh/100km</td>
                        }
                        else if (range.BasicTrimEpaRealConsumption != null && range.TopTrimRealWltpConsumption != null && range.BasicTrimEpaRealConsumption == range.TopTrimEpaRealConsumption)
                        {
                            <td scope="col">@Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimEpaRealConsumption.Value).Value,1) mi/kWh  (@Decimal.Round(range.BasicTrimEpaRealConsumption.Value,2) kWh/100km)</td>
                        }
                        else
                        {
                            <td scope="col"></td>
                        }
                    }
                }
            </tr>

             <tr class="table-secondary">
                <th scope="row">Performance</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Top Speed</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach(Performance perf in ev.Drivetrain.Performance)
                            {
                                @spacer
                                @perf.TopSpeed <span>km/h</span>
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Power</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Performance perf in ev.Drivetrain.Performance)
                            {
                                @spacer
                                @perf.PowerKw <span>kW</span>
                                if (perf.PowerKwBoost != null)
                                {
                                    <span>(@perf.PowerKwBoost Kw with boost)</span>
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Torque</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Performance perf in ev.Drivetrain.Performance)
                            {
                                @spacer
                                @perf.TorqueNm <span>Nm</span>
                                if (perf.TorqueNmBoost != null)
                                {
                                    <span>(@perf.TorqueNmBoost Nm with boost)</span>
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">0-100km/h (0-62mph)</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Performance perf in ev.Drivetrain.Performance)
                            {
                                @spacer
                                @perf.ZeroToHundredKph <span>s</span>
                                if(perf.ZeroToHundredKphBoost != null)
                                {
                                   <span>(@perf.ZeroToHundredKphBoost s with boost)</span>
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Drivetrain</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Drive</th>
                @foreach (EV ev in Model.Models)
                {
                    if(ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontAxle))
                    {
                        <td scope="col">FWD</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorRearAxle))
                    {
                        <td scope="col">RWD</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontAndRearAxle)
                    || ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontTwoMotorsRearAxle)
                    || ev.Drivetrain.DriveSetup.Equals(DriveSetup.TwoMotorsFrontAndRearAxle))
                    {
                        <td scope="col">AWD</td>
                    }

                }
            </tr>
            <tr>
                <th scope="row">Motor setup</th>
                @foreach (EV ev in Model.Models)
                {
                    if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontAxle))
                    {
                        <td scope="col">One motor front axle</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorRearAxle))
                    {
                        <td scope="col">One motor rear axle</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontAndRearAxle))
                    {
                        <td scope="col">One motor front and rear axle</td>
                    }
                     else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontTwoMotorsRearAxle))
                    {
                        <td scope="col">One motor front and two motors rear axle</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.TwoMotorsFrontAndRearAxle))
                    {
                        <td scope="col">Two motors front and rear axle</td>
                    }
                }
            </tr>
            <tr>
                <th scope="row">Motor technology</th>
                @foreach (EV ev in Model.Models)
                {
                    bool pmsm = false;
                    bool asm = false;
                    bool wrsm = false;
                    foreach(Motor motor in ev.Drivetrain.Motors)
                    {
                    
                        if(motor.Type.Equals(MotorType.ASM))
                        {
                            asm = true;
                        }
                        else if (motor.Type.Equals(MotorType.PMSM))
                        {
                            pmsm = true;
                        }
                        else if (motor.Type.Equals(MotorType.WRSM))
                        {
                            wrsm = true;
                        }
                    }

                    if(pmsm && asm)
                    {
                        <td scope="col">ASM front and PMSM rear</td>
                    }
                    else if(wrsm)
                    {
                        <td scope="col">WRSM</td>
                    }
                    else if (asm)
                    {
                        <td scope="col">ASM</td>
                    }
                    else if (pmsm)
                    {
                        <td scope="col">PSMS</td>
                    }
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Suspension</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Suspension options</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Drivetrain.Suspension.Count()
                    
                        @{
                            string spiltvalue = string.Empty;
                            if(ev.Drivetrain.Suspension.Count() > 1)
                            {
                                foreach (Suspension suspension in ev.Drivetrain.Suspension)
                                {
                                    @spiltvalue
                                    <span>( @suspension.Name )</span>
                                    spiltvalue = " / ";
                                }
                                
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Adaptive damping front</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">
                    
                    @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                    {
                        @spiltvalue
                        RenderEvFeature(suspension.AdjustableDampingFront);
                        spiltvalue = " / ";
                        }
                    </td>
           
                }
            </tr>
            <tr>
                <th scope="row">Adaptive damping rear</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            RenderEvFeature(suspension.AdjustableDampingRear);
                            spiltvalue = " / ";
                        }
                    </td>

                }
            </tr>
            <tr>
                <th scope="row">Adjustable height front</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            RenderEvFeature(suspension.AdjustableHeightFront);
                            spiltvalue = " / ";
                        }
                    </td>

                }
            </tr>
            <tr>
                <th scope="row">Ground clearance</th>
                @foreach (EV ev in Model.Models)
                {
                    string splitvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @splitvalue
                            if (suspension.MinGroundClearanceMM != suspension.MaxGroundClearanceMM)
                            {
                                @suspension.MinGroundClearanceMM <span>-</span> @suspension.MaxGroundClearanceMM <span>mm</span>
                            }
                            else
                            {
                                @suspension.MinGroundClearanceMM <span>mm</span>
                            }
                            splitvalue = " / ";
                        }
                    </td>

                }
            </tr>

            <tr>
                <th scope="row">Adjustable height rear</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            RenderEvFeature(suspension.AdjustableHeightRear);
                            spiltvalue = " / ";
                        }
                    </td>

                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Size & Weight</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Length</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.Length mm</td>
                }
            </tr>

            <tr>
                <th scope="row">Height</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.Height mm</td>
                }
            </tr>
            <tr>
                <th scope="row">Width excluding mirrors</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.WidthExcludingMirrors mm</td>
                }
            </tr>
            <tr>
                <th scope="row">Width including mirrors</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.WidhtIncludingMirrors mm</td>
                }
            </tr>

            <tr>
                <th scope="row">Curb Weight</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.TransportCapabilities.WeightUnladenDINKg kg</td>
                }
            </tr>
            <tr>
                <th scope="row">Max Weight</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.TransportCapabilities.MaxVehicleWeightKg kg</td>
                }
            </tr>
            <tr>
                <th scope="row">Max Roof load</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                   @if(ev.TransportCapabilities.MaxRoofLoadKg.HasValue)
                   {
                        @ev.TransportCapabilities.MaxRoofLoadKg  <span>kg</span>
                   }
                   </td>
                }
            </tr>
            <tr>
                <th scope="row">Max weight braked trailer</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @if (ev.TransportCapabilities.TrailerSizeBrakedKg.HasValue)
                        {
                            @ev.TransportCapabilities.TrailerSizeBrakedKg  <span>kg</span>
                        }
                    </td>
                }
            </tr>

            <tr class="table-secondary">
                <th scope="row">ADAS</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">ABS</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.AntiLockBrakingSystem);
                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Automatic Emergency Braking</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.AutomaticEmergencyBraking);
                        }
                    </td>
                    
                }
            </tr>

            <tr>
                <th scope="row">Automatic Emergency Steering</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.AutomaticEmergencySteering);
                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Cross Traffic Assist</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.CrossTrafficAssist);
                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Drowsiness Alert</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.DrowsinessAlert);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Electronic Stability Control</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.ElectronicStabilityControl);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Exit Warning</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.ExitWarning);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Forward collision warning</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.ForwardCollisionWarning);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Lane Departure Warning</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.LaneDepartureWarning);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Lane Keeping</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.LaneKeeping);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Left Turn Crash Avoidance</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.LeftTurnCrashAvoidance);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Night Vision</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.NightVision);
                        }
                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Battery</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Gross battery size</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Battery battery in ev.Drivetrain.Battery)
                            {
                                @spacer
                                @battery.GrossCapacitykWh <span>kWh</span>
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Available battery size</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Battery battery in ev.Drivetrain.Battery)
                            {
                                @spacer
                                @battery.NetCapacitykWh <span>kWh</span>
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Cell chemistry</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Battery battery in ev.Drivetrain.Battery)
                            {
                                @spacer
                                @battery.CellInfo.CellChemistry
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Charging</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Max DC Charging</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Battery battery in ev.Drivetrain.Battery)
                            {
                                @spacer
                                @battery.MaxDCChargeSpeed <span>kW</span>
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Average DC Charging 0-100%</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                       @{
                            string spacer = "";
                            foreach(EvCalculations evsc in ev.Calculations)
                            {
                           
                                @if (evsc.AverageChargingSpeed.HasValue)
                                {
                                    @spacer
                                    @Decimal.Round(evsc.AverageChargingSpeed.Value,1) <span>kW</span>
                                    spacer = " / ";
                                }
                            }
                        }

                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Average DC Charging 10-100%</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (EvCalculations evsc in ev.Calculations)
                            {
                           
                                @if (evsc.AverageChargingSpeed10100.HasValue)
                                {
                                    @spacer
                                    @Decimal.Round(evsc.AverageChargingSpeed10100.Value,1) <span>kW</span>
                                    spacer = " / ";
                                }
                            }
                        }

                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Average DC Charging 10-80%</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (EvCalculations evsc in ev.Calculations)
                            {
                      
                                @if (evsc.AverageChargingSpeed1080.HasValue)
                                {
                                    @spacer
                                    @Decimal.Round(evsc.AverageChargingSpeed1080.Value,1) <span>kW</span>
                                    spacer = " / ";
                                }
                            }
                        }
                    </td>
                }
            </tr>

           
        </tbody>
    </table>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
    </body>
</html>

@functions {
    void RenderEvFeature(EVFeature feature)
    {
        if(feature != null && feature.Available())
        {
            if(feature.FeatureStatus.Equals(FeatureStatus.Optional))
            {
                <span>Optional</span>
            }
            else
            {
                <span>Standard</span>
            }
        }
        else
        {
            <span>Not available</span>
        }
    }
}