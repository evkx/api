@using evdb.Models;
@using evdb.models.Enums;
@using evdb.models.Models;
@using evkxapi.Helpers;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model evkxapi.Models.EvCompareViewModel

<!doctype html>
<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <title>Compare models EVKX.net</title>
</head>
<body>
    <img src="https://evkx.net/images/evkxlogo_s.png" />
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Model</th>
                @foreach (EV ev in Model.Models)
                {
                    <th scope="col">@ev.Brand.Name @ev.ModelInfo.Variant</th>
                }
           </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row"></th>
                @foreach (EV ev in Model.Models)
                {
                    if (ev.ModelPictures.Any())
                    {
                        CloudMedia? media = ev.ModelPictures.FirstOrDefault(p => p.ExternalUrl != null && p.ExternalUrl.Contains("main_1"));
                        if (media != null && media.ExternalUrl != null)
                        {
                            <td scope="col">
                                <a href="https://evkx.net/@ev.GetEvPath()" target="_blank">
                                    <img src="@media.ExternalUrl.Replace("main_1", "main_1_xst")" class="img-thumbnail" alt="" width="200">
                               </a>
                            </td>
                        }
                    }

                }
            </tr>
            <tr>
                <th scope="row">Type</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.ModelInfo.BodyType</td>
                }
            </tr>
            <tr>
                <th scope="row">World premiere</th>
                @foreach (EV ev in Model.Models)
                {
                    if (ev.ModelInfo?.WorldPremiere != null)
                    {
                        <td scope="col">@ev.ModelInfo.WorldPremiere.Value.ToLongDateString()</td>
                    }
                    else
                    {
                        <td scope="col"></td>
                    }
                }
            </tr>
            <tr>
                <th scope="row">Delivery start</th>
                @foreach (EV ev in Model.Models)
                {
                    if (ev.ModelInfo?.DeliveryStart != null)
                    {
                        <td scope="col">@ev.ModelInfo.DeliveryStart.Value.ToString("MMMM yyyy")</td>
                    }
                    else
                    {
                        <td scope="col"></td>
                    }
                }
            </tr>
            <tr>
                <th scope="row">Model status</th>
                @foreach (EV ev in Model.Models)
                {
                    if (ev.ModelInfo?.ModelStatus != null)
                    {
                        <td scope="col">@ev.ModelInfo.ModelStatus.ToString()</td>
                    }
                    else
                    {
                        <td scope="col"></td>
                    }
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Range And Consumption</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">WLTP range</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                    @{
                    string splitvalue = string.Empty;
                    foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                    {
                        if (range.BasicTrimWltpRange != null && range.TopTrimWltpRange != null && range.BasicTrimWltpRange != range.TopTrimWltpRange)
                        {
                            @Html.Raw(splitvalue)
                            @range.BasicTrimWltpRange 
                            @Html.Raw("-") 
                            @range.TopTrimWltpRange 
                            @Html.Raw("km (")
                            @Decimal.Round(EvConversion.ToMilesFromKph(range.BasicTrimWltpRange).Value,0)
                            @Html.Raw("-")  
                            @Decimal.Round(EvConversion.ToMilesFromKph(range.TopTrimWltpRange).Value,0)
                            @Html.Raw("miles)")
                        }
                                else if (range.BasicTrimWltpRange != null && range.BasicTrimWltpRange.HasValue && range.TopTrimWltpRange != null && range.BasicTrimWltpRange == range.TopTrimWltpRange)
                        {
                            @range.BasicTrimWltpRange 
                            @Html.Raw("km (")
                            @Decimal.Round(EvConversion.ToMilesFromKph(range.BasicTrimWltpRange).Value,0) 
                                    @Html.Raw("miles)")
                                }

                                splitvalue = " / ";
                       }
                    }
                    </td>

                }
            </tr>
            <tr>
                <th scope="row">WLTP consumption</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                    @foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                    {
                        if (range.BasicTrimRealWltpConsumption != null && range.TopTrimRealWltpConsumption != null && range.BasicTrimRealWltpConsumption != range.TopTrimRealWltpConsumption)
                        {
                                @Decimal.Round(range.BasicTrimRealWltpConsumption.Value,2)
                                @Html.Raw("-")
                                @Decimal.Round(range.TopTrimRealWltpConsumption.Value, 2) 
                                @Html.Raw("kWh/100km (")
                                @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimRealWltpConsumption.Value).Value, 1) 
                                @Html.Raw("-")
                                @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.TopTrimRealWltpConsumption.Value).Value, 1)
                                @Html.Raw("mi/kWh )")
                        }
                        else if (range.BasicTrimRealWltpConsumption != null && range.TopTrimRealWltpConsumption != null && range.BasicTrimRealWltpConsumption == range.TopTrimRealWltpConsumption)
                        {
                                @Decimal.Round(range.BasicTrimRealWltpConsumption.Value,2) @Html.Raw("kWh/100km")
                                @Html.Raw("(");
                                @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimRealWltpConsumption.Value).Value, 1) 
                                @Html.Raw("mi/kWh )")
                        }
                    }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">WLTP consumption including charging loss</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                        {
                            if (range.BasicTrimWltpConsumption != null && range.TopTrimWltpConsumption != null && range.BasicTrimWltpConsumption != range.TopTrimWltpConsumption)
                            {
                                @Decimal.Round(range.BasicTrimWltpConsumption.Value,2)
                                @Html.Raw("-")
                                @Decimal.Round(range.TopTrimWltpConsumption.Value, 2)
                                @Html.Raw("kWh/100km (")
                                @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimWltpConsumption.Value).Value, 1)
                                @Html.Raw("-")
                                @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.TopTrimWltpConsumption.Value).Value, 1)
                                @Html.Raw("mi/kWh )")
                            }
                            else if (range.BasicTrimWltpConsumption != null && range.TopTrimWltpConsumption != null && range.BasicTrimWltpConsumption == range.TopTrimWltpConsumption)
                            {
                                @Decimal.Round(range.BasicTrimWltpConsumption.Value,2) @Html.Raw("kWh/100km")
                                @Html.Raw("(")
                                ;
                                @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimWltpConsumption.Value).Value, 1)
                                @Html.Raw("mi/kWh )")
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">EPA range</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                    @foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                    {
                        if (range.BasicTrimEpaRange != null && range.TopTrimEpaRange != null && range.BasicTrimEpaRange != range.TopTrimEpaRange)
                        {
                            @range.BasicTrimEpaRange
                            @Html.Raw("-")
                            @range.TopTrimEpaRange
                            @Html.Raw("miles (")
                            @Decimal.Round(EvConversion.ToKmFromMiles(range.BasicTrimEpaRange).Value, 0)
                            @Html.Raw("-")
                            @Decimal.Round(EvConversion.ToKmFromMiles(range.TopTrimEpaRange).Value,0) 
                            @Html.Raw("km)");
                        }
                        else if (range.BasicTrimEpaRange != null && range.TopTrimEpaRange != null && range.BasicTrimEpaRange == range.TopTrimEpaRange)
                        {
                            @range.BasicTrimEpaRange 
                            @Html.Raw("miles (")
                            @Decimal.Round(EvConversion.ToKmFromMiles(range.BasicTrimEpaRange).Value,0)
                            @Html.Raw("km)")
                        }
                    }
                    </td>

                }
            </tr>
            <tr>
                <th scope="row">EPA consumption</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                    @foreach (RangeAndConsumption range in ev.Drivetrain.RangeAndConsumption)
                    {
                        if (range.BasicTrimEpaRealConsumption != null && range.TopTrimEpaRealConsumption != null && range.BasicTrimEpaRealConsumption != range.TopTrimEpaRealConsumption)
                        {
                            @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimEpaRealConsumption.Value).Value,1)
                            @Decimal.Round(range.BasicTrimEpaRealConsumption.Value,2)
                            @Html.Raw("-")
                            @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.TopTrimEpaRealConsumption.Value).Value,1)
                            @Html.Raw("mi/kWh (")
                            @Decimal.Round(range.BasicTrimEpaRealConsumption.Value,2)
                            @Html.Raw("-")
                            @Decimal.Round(range.TopTrimEpaRealConsumption.Value,2)
                            @Html.Raw("kWh/100km )")

                        }
                            else if (range.BasicTrimEpaRealConsumption != null && range.TopTrimEpaRealConsumption != null && range.BasicTrimEpaRealConsumption == range.TopTrimEpaRealConsumption)
                        {
                            @Decimal.Round(EvConversion.ToMiKwhFromKwh100km(range.BasicTrimEpaRealConsumption.Value).Value,1) 
                            @Html.Raw("mi/kWh  (")
                            @Decimal.Round(range.BasicTrimEpaRealConsumption.Value,2) 
                            @Html.Raw("kWh/100km)")
                        }
                       
                    }
                    </td>
                }
            </tr>

             <tr class="table-secondary">
                <th scope="row">Performance</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Top Speed</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach(Performance perf in ev.Drivetrain.Performance)
                            {
                             
                                @spacer
                                @Html.Raw($"{perf.TopSpeed} kph ({EvConversion.ToMilesFromKph(perf.TopSpeed,0)} mph)")
                                spacer = " / ";
                                
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Power</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Performance perf in ev.Drivetrain.Performance)
                            {
                                @spacer
                                @Html.Raw($"{perf.PowerKw} kW ({EvConversion.ToHpFromKw(perf.PowerKw)} hp / {EvConversion.ToBHpFromKw(perf.PowerKw)} bhp)")
                                if (perf.PowerKwBoost != null)
                                {
                                    @Html.Raw($"({perf.PowerKwBoost} kW ({EvConversion.ToHpFromKw(perf.PowerKwBoost)} hp / {EvConversion.ToBHpFromKw(perf.PowerKwBoost)} bhp) with boost)")
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Torque</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Performance perf in ev.Drivetrain.Performance)
                            {
                        
                                @spacer
                                @Html.Raw($"{perf.TorqueNm} nm ({EvConversion.ToFootPoundsFromNm(perf.TorqueNm)} ft-lb)")
                                if (perf.TorqueNmBoost != null)
                                {
                                    @Html.Raw($"({perf.TorqueNmBoost}({EvConversion.ToFootPoundsFromNm(perf.TorqueNmBoost)} ft-lb) with boost")
                                }
                        
                                spacer = " / ";
                               
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">0-100km/h (0-62mph)</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Performance perf in ev.Drivetrain.Performance)
                            {
                                @spacer
                                @perf.ZeroToHundredKph <span>s</span>
                                if(perf.ZeroToHundredKphBoost != null)
                                {
                                   <span>(@perf.ZeroToHundredKphBoost s with boost)</span>
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Drivetrain</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Drive</th>
                @foreach (EV ev in Model.Models)
                {
                    if(ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontAxle))
                    {
                        <td scope="col">FWD</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorRearAxle))
                    {
                        <td scope="col">RWD</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontAndRearAxle)
                    || ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontTwoMotorsRearAxle)
                    || ev.Drivetrain.DriveSetup.Equals(DriveSetup.TwoMotorsFrontAndRearAxle))
                    {
                        <td scope="col">AWD</td>
                    }

                }
            </tr>
            <tr>
                <th scope="row">Motor setup</th>
                @foreach (EV ev in Model.Models)
                {
                    if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontAxle))
                    {
                        <td scope="col">One motor front axle</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorRearAxle))
                    {
                        <td scope="col">One motor rear axle</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontAndRearAxle))
                    {
                        <td scope="col">One motor front and rear axle</td>
                    }
                     else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.OneMotorFrontTwoMotorsRearAxle))
                    {
                        <td scope="col">One motor front and two motors rear axle</td>
                    }
                    else if (ev.Drivetrain.DriveSetup.Equals(DriveSetup.TwoMotorsFrontAndRearAxle))
                    {
                        <td scope="col">Two motors front and rear axle</td>
                    }
                }
            </tr>
            <tr>
                <th scope="row">Motor technology</th>
                @foreach (EV ev in Model.Models)
                {
                    bool pmsm = false;
                    bool asm = false;
                    bool wrsm = false;
                    foreach(Motor motor in ev.Drivetrain.Motors)
                    {
                    
                        if(motor.Type.Equals(MotorType.ASM))
                        {
                            asm = true;
                        }
                        else if (motor.Type.Equals(MotorType.PMSM))
                        {
                            pmsm = true;
                        }
                        else if (motor.Type.Equals(MotorType.WRSM))
                        {
                            wrsm = true;
                        }
                    }

                    if(pmsm && asm)
                    {
                        <td scope="col"><a href="https://evkx.net/technology/motors/asm/" target="_blank">ASM</a> front and <a href="https://evkx.net/technology/motors/pmsm/" target="_blank">PMSM</a> rear</td>
                    }
                    else if(wrsm)
                    {
                        <td scope="col"><a href="https://evkx.net/technology/motors/wrsm/" target="_blank">WRSM</a></td>
                    }
                    else if (asm)
                    {
                        <td scope="col"><a href="https://evkx.net/technology/motors/asm/" target="_blank">ASM</a></td>
                    }
                    else if (pmsm)
                    {
                        <td scope="col"><a href="https://evkx.net/technology/motors/pmsm/" target="_blank">PMSM</a></td>
                    }
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Brakes & Regen</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Front brake type</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Brakes brake in ev.Drivetrain.Brakes)
                            {
                                @spacer
                                if(brake.FrontBrakeType.Equals(BrakeType.FixedCaliperDisc))
                                {
                                    @Html.Raw("Disc brakes, fixed caliper")    
                                }
                                else if(brake.FrontBrakeType.Equals(BrakeType.FloatingCaliperDisc))
                                {
                                    @Html.Raw("Disc brakes, floating caliper")
                                }
                                else if (brake.FrontBrakeType.Equals(BrakeType.Drum))
                                {
                                    @Html.Raw("Drum brake")
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Rear brake type</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Brakes brake in ev.Drivetrain.Brakes)
                            {
                                @spacer
                                if (brake.RearBrakeType.Equals(BrakeType.FixedCaliperDisc))
                                {
                                    @Html.Raw("Disc brakes, fixed caliper")
                                }
                                else if (brake.RearBrakeType.Equals(BrakeType.FloatingCaliperDisc))
                                {
                                    @Html.Raw("Disc brakes, floating caliper")
                                }
                                else if (brake.RearBrakeType.Equals(BrakeType.Drum))
                                {
                                    @Html.Raw("Drum brake")
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Front Disc diameter</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Brakes brake in ev.Drivetrain.Brakes)
                            {
                                @spacer
                                if (brake.FrontBrakeDiscDiameter != null)
                                {
                                    @brake.FrontBrakeDiscDiameter
                                    @Html.Raw("mm")
                                    
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Rear Disc diameter</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Brakes brake in ev.Drivetrain.Brakes)
                            {
                                @spacer
                                if (brake.RearBrakeDiscDiameter != null)
                                {
                                    @brake.RearBrakeDiscDiameter
                                    @Html.Raw("mm")

                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Front disc type</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Brakes brake in ev.Drivetrain.Brakes)
                            {
                                @spacer
                                if (brake.FrontBrakeDiscType.Equals(BrakeDiscType.Ceramic))
                                {
                                    @Html.Raw("Ceramic")
                                }
                                else if (brake.FrontBrakeDiscType.Equals(BrakeDiscType.CastIron))
                                {
                                    @Html.Raw("Cast Iron")
                                }
                                else if (brake.FrontBrakeDiscType.Equals(BrakeDiscType.TungstenCarbidCoating))
                                {
                                    @Html.Raw("Carbid")
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Rear disc type</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Brakes brake in ev.Drivetrain.Brakes)
                            {
                                @spacer
                                if (brake.RearBrakeDiscType.Equals(BrakeDiscType.Ceramic))
                                {
                                    @Html.Raw("Ceramic")
                                }
                                else if (brake.RearBrakeDiscType.Equals(BrakeDiscType.CastIron))
                                {
                                    @Html.Raw("Cast Iron")
                                }
                                else if (brake.RearBrakeDiscType.Equals(BrakeDiscType.TungstenCarbidCoating))
                                {
                                    @Html.Raw("Carbid")
                                }
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Blended brakes (regen on brake pedal)</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            bool blendedBrake = false;
                            foreach (Brakes brake in ev.Drivetrain.Brakes)
                            {
                                if (brake.BlendedBrakes.HasValue && brake.BlendedBrakes.Value)
                                {
                                    blendedBrake = true;
                                }
                            }
                            if (blendedBrake)
                            {
                                @Html.Raw("Standard")
                            }
                            else
                            {
                                @Html.Raw("Not available")
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Lift-up-regen (one-pedal-driving)</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            if (ev.Drivetrain.Regen != null && ev.Drivetrain.Regen.OnePedalDriving.HasValue && ev.Drivetrain.Regen.OnePedalDriving.Value)
                            {
                                @Html.Raw("Yes")
                            }
                            else
                            {
                                @Html.Raw("No")
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Lift-up-regen stopping modes</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            if (ev.Drivetrain?.Regen != null && ev.Drivetrain.Regen.OnePedalStoppingMode.HasValue && ev.Drivetrain.Regen.OnePedalStoppingMode.Equals(OnePedalStoppingMode.Creep))
                            {
                                @Html.Raw("Creep")
                            }
                            else if (ev.Drivetrain?.Regen != null && ev.Drivetrain.Regen.OnePedalStoppingMode.HasValue && ev.Drivetrain.Regen.OnePedalStoppingMode.Equals(OnePedalStoppingMode.Roll))
                            {
                                @Html.Raw("Roll")
                            }
                            else if (ev.Drivetrain?.Regen != null && ev.Drivetrain.Regen.OnePedalStoppingMode.HasValue && ev.Drivetrain.Regen.OnePedalStoppingMode.Equals(OnePedalStoppingMode.Hold))
                            {
                                @Html.Raw("Hold")
                            }
                            else if (ev.Drivetrain?.Regen != null && ev.Drivetrain.Regen.OnePedalStoppingMode.HasValue && ev.Drivetrain.Regen.OnePedalStoppingMode.Equals(OnePedalStoppingMode.HoldRollCreep))
                            {
                                @Html.Raw("Hold, roll or creep")
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Lift-up-regen levels</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            if (ev.Drivetrain.Regen != null && ev.Drivetrain.Regen.LiftOfRegenLevels != null && ev.Drivetrain.Regen.LiftOfRegenLevels.Count > 1)
                            {
                                @Html.Raw(ev.Drivetrain.Regen.LiftOfRegenLevels.Count)
                            }

                            if (ev.Drivetrain.Regen != null && ev.Drivetrain.Regen.LiftOfRegenLevels != null && ev.Drivetrain.Regen.LiftOfRegenLevels.Count == 1)
                            {
                                @Html.Raw("Only one level")
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Coasting</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            if (ev.Drivetrain.Regen != null && ev.Drivetrain.Regen.Coasting.HasValue && ev.Drivetrain.Regen.Coasting.Value)
                            {
                                @Html.Raw("Yes")
                            }
                            else
                            {
                                @Html.Raw("No")
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Adaptive regen when coasting</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            if (ev.Drivetrain.Regen != null && ev.Drivetrain.Regen.AdaptiveRegen.HasValue && ev.Drivetrain.Regen.AdaptiveRegen.Value)
                            {
                                @Html.Raw("Yes")
                            }
                            else
                            {
                                @Html.Raw("No")
                            }
                        }
                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Suspension</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Suspension options</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Drivetrain.Suspension.Count()
                    
                        @{
                            string spiltvalue = string.Empty;
                            if(ev.Drivetrain.Suspension.Count() > 1)
                            {
                                @Html.Raw("(");
                                foreach (Suspension suspension in ev.Drivetrain.Suspension)
                                {
                                    @spiltvalue
                                    @suspension.Name
                                    spiltvalue = " / ";
                                }
   
                               @Html.Raw(")");
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Adaptive damping front</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">
                    
                    @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                    {
                        @spiltvalue
                        RenderEvFeature(suspension.AdjustableDampingFront);
                        spiltvalue = " / ";
                        }
                    </td>
           
                }
            </tr>
            <tr>
                <th scope="row">Adaptive damping rear</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            RenderEvFeature(suspension.AdjustableDampingRear);
                            spiltvalue = " / ";
                        }
                    </td>

                }
            </tr>
            <tr>
                <th scope="row">Suspension type front</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            if(suspension.SuspensionTypeFront == null)
                            {
                                
                            }
                            else if (suspension.SuspensionTypeFront.Equals(SuspensionType.MacPhersonStrut))
                            {
                                @Html.Raw("MacPherson Strut");
                            }
                            else if (suspension.SuspensionTypeFront.Equals(SuspensionType.DoubleWishbone))
                            {
                                @Html.Raw("Double Wishbone");
                            }
                            else if (suspension.SuspensionTypeFront.Equals(SuspensionType.Multilink))
                            {
                                @Html.Raw("Multilink");
                            }

                            spiltvalue = " / ";
                        }
                    </td>

                }
            </tr>
            <tr>
                <th scope="row">Suspension type rear</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            if (suspension.SuspensionTypeRear == null)
                            {

                            }
                            else if (suspension.SuspensionTypeRear.Equals(SuspensionType.Leaf))
                            {
                                @Html.Raw("Leaf")
                                ;
                            }
                            else if (suspension.SuspensionTypeRear.Equals(SuspensionType.Multilink))
                            {
                                @Html.Raw("Multilink")
                                ;
                            }

                            spiltvalue = " / ";
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Spring type front</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            if (suspension.SpringTypeFront == null)
                            {

                            }
                            else if (suspension.SpringTypeFront.Equals(SpringType.Coil))
                            {
                                @Html.Raw("Steel springs")
                                
                            }
                            else if (suspension.SpringTypeFront.Equals(SpringType.Air))
                            {
                                @Html.Raw("Air springs (air suspension)")
                                
                            }

                            spiltvalue = " / ";
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Spring type rear</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            if (suspension.SpringTypeRear == null)
                            {

                            }
                            else if (suspension.SpringTypeRear.Equals(SpringType.Coil))
                            {
                                @Html.Raw("Steel springs")
                                ;
                            }
                            else if (suspension.SpringTypeRear.Equals(SpringType.Air))
                            {
                                @Html.Raw("Air springs (air suspension)")
                                ;
                            }

                            spiltvalue = " / ";
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Adjustable height front</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            RenderEvFeature(suspension.AdjustableHeightFront);
                            spiltvalue = " / ";
                        }
                    </td>

                }
            </tr>
            

            <tr>
                <th scope="row">Adjustable height rear</th>
                @foreach (EV ev in Model.Models)
                {
                    string spiltvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @spiltvalue
                            RenderEvFeature(suspension.AdjustableHeightRear);
                            spiltvalue = " / ";
                        }
                    </td>

                }
            </tr>
            <tr>
                <th scope="row">Ground clearance</th>
                @foreach (EV ev in Model.Models)
                {
                    string splitvalue = string.Empty;
                    <td scope="col">

                        @foreach (Suspension suspension in ev.Drivetrain.Suspension)
                        {
                            @splitvalue
                            if (suspension.MinGroundClearanceMM != suspension.MaxGroundClearanceMM)
                            {
                                @Html.Raw($"{suspension.MinGroundClearanceMM} - {suspension.MaxGroundClearanceMM} mm ({EvConversion.ToInchFromMillimeter(suspension.MinGroundClearanceMM,2)}\" - {EvConversion.ToInchFromMillimeter(suspension.MaxGroundClearanceMM, 0)}\")")
                            }
                            else
                            {
                                @Html.Raw($"{suspension.MinGroundClearanceMM} mm ({EvConversion.ToInchFromMillimeter(suspension.MinGroundClearanceMM, 2)}\")")
                            }
                            splitvalue = " / ";
                        }
                    </td>

                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Size & Weight</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Length</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.Length mm (@EvConversion.ToInchFromMillimeter(ev.Dimensions.Length, 1)")</td>
                }
            </tr>

            <tr>
                <th scope="row">Height</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.Height mm (@EvConversion.ToInchFromMillimeter(ev.Dimensions.Height, 1)")</td>
                }
            </tr>
            <tr>
                <th scope="row">Width excluding mirrors</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.WidthExcludingMirrors mm (@EvConversion.ToInchFromMillimeter(ev.Dimensions.WidthExcludingMirrors,1)") </td>
                }
            </tr>
            <tr>
                <th scope="row">Width including mirrors</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.WidhtIncludingMirrors mm (@EvConversion.ToInchFromMillimeter(ev.Dimensions.WidhtIncludingMirrors, 1)")</td>
                }
            </tr>
            <tr>
                <th scope="row">Wheelbase</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.Wheelbase mm (@EvConversion.ToInchFromMillimeter(ev.Dimensions.Wheelbase, 1)")</td>
                }
            </tr>
           <tr>
                <th scope="row">Turning circle</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.Dimensions.TurningCircle meter (@EvConversion.ToInchFromMeter(ev.Dimensions.TurningCircle, 1)")</td>
                }
            </tr>

            <tr>
                <th scope="row">Curb Weight</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.TransportCapabilities.WeightUnladenDINKg kg (@EvConversion.ToLbsFromKg(ev.TransportCapabilities.WeightUnladenDINKg, 1) lbs)</td>
                }
            </tr>
            <tr>
                <th scope="row">Max Weight</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">@ev.TransportCapabilities.MaxVehicleWeightKg kg (@EvConversion.ToLbsFromKg(ev.TransportCapabilities.MaxVehicleWeightKg, 1) lbs)</td>
                }
            </tr>
            <tr>
                <th scope="row">Max Roof load</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                   @if(ev.TransportCapabilities.MaxRoofLoadKg.HasValue)
                   {
                            <span>
                            @ev.TransportCapabilities.MaxRoofLoadKg  kg
                            (@EvConversion.ToLbsFromKg(ev.TransportCapabilities.MaxRoofLoadKg, 1) lbs)
                            </span>
                   }
                   </td>
                }
            </tr>
            <tr>
                <th scope="row">Max weight braked trailer</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @if (ev.TransportCapabilities.TrailerSizeBrakedKg.HasValue)
                        {
                            <span>
                                @ev.TransportCapabilities.TrailerSizeBrakedKg  kg
                                (@EvConversion.ToLbsFromKg(ev.TransportCapabilities.TrailerSizeBrakedKg, 1) lbs)
                            </span>
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Trunk capacity</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @if (ev.TransportCapabilities.CargoCapacityLiter.HasValue)
                        {
                            @Html.Raw($"{ev.TransportCapabilities.CargoCapacityLiter} liter ({EvConversion.ToCuFeetFromLiters(ev.TransportCapabilities.CargoCapacityLiter)} cu-ft) ")
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Trunk capacity seat down</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @if (ev.TransportCapabilities.CargoCapacitySeatDownLiter.HasValue)
                        {
                            @Html.Raw($"{ev.TransportCapabilities.CargoCapacitySeatDownLiter} liter ({EvConversion.ToCuFeetFromLiters(ev.TransportCapabilities.CargoCapacitySeatDownLiter)} cu-ft) ")

    
                        }

                        @if (ev.TransportCapabilities.CargoCapacityThirdRowSeatDownLiter.HasValue)
                        {
                            @Html.Raw($"({ev.TransportCapabilities.CargoCapacityThirdRowSeatDownLiter} liter /{EvConversion.ToCuFeetFromLiters(ev.TransportCapabilities.CargoCapacityThirdRowSeatDownLiter)} cu-ft with third row down)")
                        }
                    </td>
                }
            </tr>
            @if(Model.Models.Exists(r=> r.ModelInfo.BodyType.Equals(EvBodyType.PickupTruck)))
            {

            <tr>
                <th scope="row">Bed capacity</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @if (ev.TransportCapabilities.BedVolumeLiter.HasValue)
                        {
                           @Html.Raw($"{ev.TransportCapabilities.BedVolumeLiter} liter ({EvConversion.ToCuFeetFromLiters(ev.TransportCapabilities.BedVolumeLiter)} cu-ft) ")
                        }
                    </td>
                }
            </tr>

                <tr>
                    <th scope="row">Bed length</th>
                    @foreach (EV ev in Model.Models)
                    {
                        <td scope="col">
                            @if (ev.TransportCapabilities.BedLength.HasValue)
                            {
                                @Html.Raw($"{ev.TransportCapabilities.BedLength} mm ({EvConversion.ToInchFromMillimeter(ev.TransportCapabilities.BedLength)}\") ")
                            }
                        </td>
                    }
                </tr>

                <tr>
                    <th scope="row">Bed width</th>
                    @foreach (EV ev in Model.Models)
                    {
                        <td scope="col">
                            @if (ev.TransportCapabilities.BedWidth.HasValue)
                            {
                                @Html.Raw($"{ev.TransportCapabilities.BedWidth} liter ({EvConversion.ToInchFromMillimeter(ev.TransportCapabilities.BedWidth)}\" ) ")
                            }
                        </td>
                    }
                </tr>

            }

            <tr class="table-secondary">
                <th scope="row">UI </th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Head Up Display</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.UIAndControls.HeadUpDisplay);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Voice Control</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.UIAndControls.VoiceControl);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Gesture Control</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.UIAndControls.GestureControl);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Driver display</th>
                @{

                    foreach (EV ev in Model.Models)
                    {
                        List<Screen> driverScreens = new List<Screen>();
                        foreach (ScreenLayout screenLayout in ev.UIAndControls.ScreenLayout)
                        {
                            foreach (Screen screen in screenLayout.Screens)
                            {
                                if (screen.ScreenCategory.Equals(ScreenCategory.DriverInformation))
                                {
                                    driverScreens.Add(screen);
                                }
                            }
                        }

                        if(driverScreens.Count > 0)
                        {
                            <td scope="col">
                             @Html.Raw("Yes")  
                             @if(driverScreens.Count > 1)
                                {
                                    @Html.Raw("("+ driverScreens.Count + " options)")
                                }


                             @foreach(Screen driverScreen in driverScreens)
                             {
                                 @driverScreen.ScreenSize @Html.Raw("\"")
                             }
                            </td>

                        }
                        else
                        {
                             <td scope="col">
                                No
                             </td>
                        }
                    }

                    

                }
            </tr>
            <tr>
                <th scope="row">Infotainment screen</th>
                @{

                    foreach (EV ev in Model.Models)
                    {
                        List<Screen> infotainmentScreens = new List<Screen>();
                        foreach (ScreenLayout screenLayout in ev.UIAndControls.ScreenLayout)
                        {
                            foreach (Screen screen in screenLayout.Screens)
                            {
                                if (screen.ScreenCategory.Equals(ScreenCategory.Infotainment))
                                {
                                    infotainmentScreens.Add(screen);
                                }
                            }
                        }

                        if (infotainmentScreens.Count > 0)
                        {
                            <td scope="col">
                                @Html.Raw("Yes")
                                @if (infotainmentScreens.Count > 1)
                                {
                                    @Html.Raw("("+ infotainmentScreens.Count + " options)")
                                }


                                @foreach (Screen driverScreen in infotainmentScreens)
                                {
                                    @driverScreen.ScreenSize @Html.Raw("\"")
                                }
                            </td>

                        }
                        else
                        {
                            <td scope="col">
                                No
                            </td>
                        }
                    }



                }
            </tr>
            <tr>
                <th scope="row">In car navigation <a href="https://evkx.net/technology/infotainment/navigation/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.Infotainment.InCarNavigation);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Apple Car Play <a href="https://evkx.net/technology/infotainment/smartphoneintegration/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.Infotainment.AppleCarPlaySupport);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Android Auto <a href="https://evkx.net/technology/infotainment/smartphoneintegration/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.Infotainment.AndroidAutoSupport);
                        }
                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Lights</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">LED Matrix headlights <a href="https://evkx.net/technology/infotainment/smartphoneintegration/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{

                            bool headlightsWithoutMatrix =false;
                            bool headlightsWithMatrix = false;
                            foreach (Headlight headlight in ev.Lights.Headlights)
                            {
                                if (headlight.LightTechnology.Equals(LightTechnology.LEDMatrix) || headlight.LightTechnology.Equals(LightTechnology.LEDDigitalMatrix)
                                || headlight.LightTechnology.Equals(LightTechnology.LEDMatrixLaser))
                                {
                                    headlightsWithMatrix = true;
                                }
                                else
                                {
                                    headlightsWithoutMatrix = true;
                                }

                            }


                            if(headlightsWithMatrix && !headlightsWithoutMatrix)
                            {
                                <span>Standard</span>
                            }
                            else if (headlightsWithMatrix && headlightsWithoutMatrix)
                            {
                                <span>Optional</span>
                            }
                            else
                            {
                                <span>Not available</span>
                            }

                      }
                        
                        

                    </td>
                }
            </tr>

            <tr class="table-secondary">
                <th scope="row">Driver Assist Systems</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">ABS <a href="https://evkx.net/technology/driverassistance/antilockbrakingsystem/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.AntiLockBrakingSystem);
                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Automatic Emergency Braking <a href="https://evkx.net/technology/driverassistance/automaticemergencybraking/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.AutomaticEmergencyBraking);
                        }
                    </td>
                    
                }
            </tr>

            <tr>
                <th scope="row">Automatic Emergency Steering <a href="https://evkx.net/technology/driverassistance/automaticemergencysteering/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.AutomaticEmergencySteering);
                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Cross Traffic Assist <a href="https://evkx.net/technology/driverassistance/frontcrosstrafficassist/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.CrossTrafficAssist);
                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Drowsiness Alert <a href="https://evkx.net/technology/driverassistance/driverdrowsinessdetection/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.DrowsinessAlert);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Electronic Stability Control <a href="https://evkx.net/technology/driverassistance/electronicstabilitycontrol/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.ElectronicStabilityControl);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Blind Spot monitoring <a href="https://evkx.net/technology/driverassistance/blindspotmonitoring/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.SideAssist);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Exit Warning <a href="https://evkx.net/technology/driverassistance/exitwarning/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.ExitWarning);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Forward collision warning (FCW) <a href="https://evkx.net/technology/driverassistance/forwardcollisionwarning/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.ForwardCollisionWarning);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Lane Departure Warning (LDW) <a href="https://evkx.net/technology/driverassistance/lanedeparturewarning/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.LaneDepartureWarning);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Lane Keeping Assist (LKA) <a href="https://evkx.net/technology/driverassistance/lanekeepingassist/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.LaneKeeping);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Left Turn Crash Avoidance</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.LeftTurnCrashAvoidance);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Night Vision <a href="https://evkx.net/technology/sensorsandcameras/infrared/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            RenderEvFeature(ev.DriverAssistance.NightVision);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Auto steer <a href="https://evkx.net/technology/driverassistance/autosteer/" target="_blank"><i class="bi-info-circle"></i></a></th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                    @if(ev.DriverAssistance?.DrivingAutomation != null && ev.DriverAssistance.DrivingAutomation.Count == 1)
                    {
                        EVFeature? eVFeature = ev.DriverAssistance.DrivingAutomation[0].LaneCenteringAssist;
                        if(eVFeature != null)
                        {
                            RenderEvFeature(eVFeature);
                        }
                    }
                    else if (ev.DriverAssistance?.DrivingAutomation != null && ev.DriverAssistance.DrivingAutomation.Count > 1)
                    {
                    
                        if(ev.DriverAssistance.DrivingAutomation.Exists(d => d.LaneCenteringAssist != null && d.LaneCenteringAssist.FeatureStatus.Equals(FeatureStatus.NotAvailable))
                        && (ev.DriverAssistance.DrivingAutomation.Exists(d => d.LaneCenteringAssist != null && d.LaneCenteringAssist.FeatureStatus.Equals(FeatureStatus.Optional))
                        || ev.DriverAssistance.DrivingAutomation.Exists(d => d.LaneCenteringAssist != null && d.LaneCenteringAssist.FeatureStatus.Equals(FeatureStatus.Standard))))
                        {
                            @Html.Raw("Optional")
                        }
                        else if (ev.DriverAssistance.DrivingAutomation.Exists(d => d.LaneCenteringAssist != null && d.LaneCenteringAssist.FeatureStatus.Equals(FeatureStatus.Optional))
                        && ev.DriverAssistance.DrivingAutomation.Exists(d => d.LaneCenteringAssist != null && d.LaneCenteringAssist.FeatureStatus.Equals(FeatureStatus.Standard)))
                        {
                            @Html.Raw("Optional")

                        }
                        else if (ev.DriverAssistance.DrivingAutomation.Exists(d => d.LaneCenteringAssist != null && d.LaneCenteringAssist.FeatureStatus.Equals(FeatureStatus.Optional)))
                        {
                            @Html.Raw("Optional")
                        }
                        else if (ev.DriverAssistance.DrivingAutomation.Exists(d => d.LaneCenteringAssist != null && d.LaneCenteringAssist.FeatureStatus.Equals(FeatureStatus.Standard)))
                        {
                            @Html.Raw("Standard")
                        }
                    }
                    </td>
                 }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Battery</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Gross battery size</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Battery battery in ev.Drivetrain.Battery)
                            {
                                @spacer
                                @battery.GrossCapacitykWh <span>kWh</span>
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Available battery size</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Battery battery in ev.Drivetrain.Battery)
                            {
                                @spacer
                                @battery.NetCapacitykWh <span>kWh</span>
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Cell chemistry</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Battery battery in ev.Drivetrain.Battery)
                            {
                                @spacer
                                @battery.CellInfo.CellChemistry
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Charging</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Charge curve (click for full size)</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        <a href="https://evkx.net/@Html.Raw(ev.GetEvPath())/chargingcurve/" target="_blank">
                            <img src="https://evkx.net/images/@Html.Raw(ev.GetEvPath())/chargingcurve.svg" style="max-width: 250px" class="img-fluid">
                        </a>
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Max DC charging power</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (Battery battery in ev.Drivetrain.Battery)
                            {
                                @spacer
                                @battery.MaxDCChargeSpeed <span>kW</span>
                                spacer = " / ";
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Average DC charging power 0-100%</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                       @{
                            string spacer = "";
                            foreach(EvCalculations evsc in ev.Calculations)
                            {
                           
                                @if (evsc.AverageChargingSpeed.HasValue)
                                {
                                    @spacer
                                    @Decimal.Round(evsc.AverageChargingSpeed.Value,1) <span>kW</span>
                                    spacer = " / ";
                                }
                            }
                        }

                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Average DC charging power 10-100%</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (EvCalculations evsc in ev.Calculations)
                            {
                           
                                @if (evsc.AverageChargingSpeed10100.HasValue)
                                {
                                    @spacer
                                    @Decimal.Round(evsc.AverageChargingSpeed10100.Value,1) <span>kW</span>
                                    spacer = " / ";
                                }
                            }
                        }

                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Average DC charging power 10-80%</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            string spacer = "";
                            foreach (EvCalculations evsc in ev.Calculations)
                            {
                      
                                @if (evsc.AverageChargingSpeed1080.HasValue)
                                {
                                    @spacer
                                    @Decimal.Round(evsc.AverageChargingSpeed1080.Value,1) <span>kW</span>
                                    spacer = " / ";
                                }
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Battery heating navigating to charger</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                           RenderEvFeature(ev.Drivetrain?.Charging?.HeatingWhenNavigateToCharger);
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Manual battery heating</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                                RenderEvFeature(ev.Drivetrain?.Charging?.ManualTriggerHeating);
                         }
                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Seats</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Number of seats</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{

                            if (ev.Interior?.SeatLayout != null && ev.Interior?.SeatLayout.Count > 0)
                            {
                                if (ev.Interior.SeatLayout.Count > 1)
                                {
                                    string spacer = "";
                                    string seatNames = "";
                                    foreach (SeatLayout seatoption in ev.Interior.SeatLayout)
                                    {
                                        seatNames += spacer + seatoption.NumberOfSeats;
                                        spacer = ", ";
                                    }
                                    @seatNames
                                }
                                else
                                {
                                    @ev.Interior.SeatLayout[0].NumberOfSeats
                                }
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Front seats options</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            @ev.Interior.FirstRowSeats.Count

                            if (ev.Interior.FirstRowSeats.Count > 1)
                            {
                                string spacer = "";

                                string seatNames = " (";
                                foreach (Seatoption seatoption in ev.Interior.FirstRowSeats)
                                {
                                    seatNames += spacer + seatoption.Name;
                                    spacer = ", ";
                                }
                                seatNames += ")";
                                @seatNames
                            }
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Heating front seats</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            bool seatOptionWithoutFeature = false;
                            bool seatOptionWithFeature = false;
                            bool seatOptionWithOptionalFeature = false;

                            foreach (Seatoption seatoption in ev.Interior.FirstRowSeats)
                            {
                                if (seatoption?.SeatHeating?.FeatureStatus != null && seatoption.SeatHeating.FeatureStatus.Equals(FeatureStatus.Standard))
                                {
                                    seatOptionWithFeature = true;
                                }
                                else if (seatoption?.SeatHeating?.FeatureStatus != null && seatoption.SeatHeating.FeatureStatus.Equals(FeatureStatus.Optional))
                                {
                                    seatOptionWithOptionalFeature = true;
                                }
                                else
                                {
                                    seatOptionWithoutFeature = true;
                                }
                            }

                            RenderSeatFeature(seatOptionWithFeature, seatOptionWithOptionalFeature, seatOptionWithoutFeature);

                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Adjustable thigh support</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            bool seatOptionWithoutFeature = false;
                            bool seatOptionWithFeature = false;
                            bool seatOptionWithOptionalFeature = false;

                            foreach (Seatoption seatoption in ev.Interior.FirstRowSeats)
                            {
                                if (seatoption?.AdjustableThighSupport?.FeatureStatus != null && seatoption.AdjustableThighSupport.FeatureStatus.Equals(FeatureStatus.Standard))
                                {
                                    seatOptionWithFeature = true;
                                }
                                else if (seatoption?.AdjustableThighSupport?.FeatureStatus != null && seatoption.AdjustableThighSupport.FeatureStatus.Equals(FeatureStatus.Optional))
                                {
                                    seatOptionWithOptionalFeature = true;
                                }
                                else
                                {
                                    seatOptionWithoutFeature = true;
                                }
                            }

                            RenderSeatFeature(seatOptionWithFeature, seatOptionWithOptionalFeature, seatOptionWithoutFeature);

                        }
                    </td>
                }
            </tr>
             <tr>
                <th scope="row">Ventilation front seats</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            bool seatOptionWithoutFeature = false;
                            bool seatOptionWithFeature = false;
                            bool seatOptionWithOptionalFeature = false;

                            foreach (Seatoption seatoption in ev.Interior.FirstRowSeats)
                            {
                                if(seatoption?.Ventilation?.FeatureStatus != null && seatoption.Ventilation.FeatureStatus.Equals(FeatureStatus.Standard))
                                {
                                    seatOptionWithFeature = true;
                                }
                                else if (seatoption?.Ventilation?.FeatureStatus != null && seatoption.Ventilation.FeatureStatus.Equals(FeatureStatus.Optional))
                                {
                                    seatOptionWithOptionalFeature = true;
                                }
                                else
                                {
                                    seatOptionWithoutFeature = true;
                                }
                            }

                            RenderSeatFeature(seatOptionWithFeature, seatOptionWithOptionalFeature, seatOptionWithoutFeature);

                        }


                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Massage front seats</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            bool seatOptionWithoutFeature = false;
                            bool seatOptionWithFeature = false;
                            bool seatOptionWithOptionalFeature = false;

                            foreach (Seatoption seatoption in ev.Interior.FirstRowSeats)
                            {
                                if(seatoption?.Massage?.FeatureStatus != null && seatoption.Massage.FeatureStatus.Equals(FeatureStatus.Standard))
                                {
                                    seatOptionWithFeature = true;
                                }
                                else if (seatoption?.Massage?.FeatureStatus != null && seatoption.Massage.FeatureStatus.Equals(FeatureStatus.Optional))
                                {
                                    seatOptionWithOptionalFeature = true;
                                }
                                else
                                {
                                    seatOptionWithoutFeature = true;
                                }
                            }

                            RenderSeatFeature(seatOptionWithFeature, seatOptionWithOptionalFeature, seatOptionWithoutFeature);

                        }


                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Heating second row</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            bool seatOptionWithoutFeature = false;
                            bool seatOptionWithFeature = false;
                            bool seatOptionWithOptionalFeature = false;

                            if(ev?.Interior?.SecondRowSeats != null)
                            {
                                foreach (Seatoption seatoption in ev.Interior.SecondRowSeats)
                                {
                                    if (seatoption?.SeatHeating?.FeatureStatus != null && seatoption.SeatHeating.FeatureStatus.Equals(FeatureStatus.Standard))
                                    {
                                        seatOptionWithFeature = true;
                                    }
                                    else if (seatoption?.SeatHeating?.FeatureStatus != null && seatoption.SeatHeating.FeatureStatus.Equals(FeatureStatus.Optional))
                                    {
                                        seatOptionWithOptionalFeature = true;
                                    }
                                    else
                                    {
                                        seatOptionWithoutFeature = true;
                                    }
                                }

                            RenderSeatFeature(seatOptionWithFeature, seatOptionWithOptionalFeature, seatOptionWithoutFeature);
                            }
                            else
                            {
                                <span>N/A</span>
                            }

                        }
                    </td>
                }
            </tr>

            <tr>
                <th scope="row">Ventilation second row seats</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            bool seatOptionWithoutFeature = false;
                            bool seatOptionWithFeature = false;
                            bool seatOptionWithOptionalFeature = false;
                            
                            if(ev?.Interior?.SecondRowSeats != null)
                            {
                                foreach (Seatoption seatoption in ev.Interior.SecondRowSeats)
                                {
                                    if (seatoption?.Ventilation?.FeatureStatus != null && seatoption.Ventilation.FeatureStatus.Equals(FeatureStatus.Standard))
                                    {
                                        seatOptionWithFeature = true;
                                    }
                                    else if (seatoption?.Ventilation?.FeatureStatus != null && seatoption.Ventilation.FeatureStatus.Equals(FeatureStatus.Optional))
                                    {
                                        seatOptionWithOptionalFeature = true;
                                    }
                                    else
                                    {
                                        seatOptionWithoutFeature = true;
                                    }
                                }
                                RenderSeatFeature(seatOptionWithFeature, seatOptionWithOptionalFeature, seatOptionWithoutFeature);
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        }


                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Massage second row seats</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @{
                            bool seatOptionWithoutFeature = false;
                            bool seatOptionWithFeature = false;
                            bool seatOptionWithOptionalFeature = false;

                            if (ev?.Interior?.SecondRowSeats != null)
                            {

                                foreach (Seatoption seatoption in ev.Interior.SecondRowSeats)
                                {
                                    if (seatoption?.Massage?.FeatureStatus != null && seatoption.Massage.FeatureStatus.Equals(FeatureStatus.Standard))
                                    {
                                        seatOptionWithFeature = true;
                                    }
                                    else if (seatoption?.Massage?.FeatureStatus != null && seatoption.Massage.FeatureStatus.Equals(FeatureStatus.Optional))
                                    {
                                        seatOptionWithOptionalFeature = true;
                                    }
                                    else
                                    {
                                        seatOptionWithoutFeature = true;
                                    }
                                }
                            
                            RenderSeatFeature(seatOptionWithFeature, seatOptionWithOptionalFeature, seatOptionWithoutFeature);
                            }
                            else
                            {
                            <span>N/A</span>
                            }
                            }


                    </td>
                }
            </tr>
            <tr class="table-secondary">
                <th scope="row">Exterior design</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col"></td>
                }
            </tr>
            <tr>
                <th scope="row">Paint color options</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @if (ev.Exterior?.PaintColors != null)
                        {
                            @ev.Exterior.PaintColors.Count()
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Wheel options</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @if (ev.Exterior?.WheelOptions != null)
                        {
                            @ev.Exterior.WheelOptions.Count()
                        }
                    </td>
                }
            </tr>
            <tr>
                <th scope="row">Wheel sizes (front/rear)</th>
                @foreach (EV ev in Model.Models)
                {
                    <td scope="col">
                        @if (ev.Exterior?.WheelOptions != null)
                        {
                            List<string> sizes = new List<string>();
                            foreach(Wheel wheel in ev.Exterior.WheelOptions)
                            {
                                string sizeKey = wheel.TireDimensionFront + "R" + wheel.WheelSize + " / " + wheel.TireDimensionRear + "R" + wheel.WheelSize;
                                if (!sizes.Contains(sizeKey))
                                {
                                    sizes.Add(sizeKey);
                                }
                            }

                            foreach(string size in sizes)
                            {
                                @size
                                <br/>
                            }
                            
                        }
                    </td>
                }
            </tr>
        </tbody>
    </table>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
    </body>
</html>

@functions {
    void RenderEvFeature(EVFeature? feature)
    {
        if(feature != null && feature.Available())
        {
            if(feature.FeatureStatus.Equals(FeatureStatus.Optional))
            {
                <span>Optional</span>
            }
            else
            {
                <span>Standard</span>
            }
        }
        else if(feature == null || feature.FeatureStatus.Equals(FeatureStatus.Unknown))
        {
            <span>?</span>
        }
        else
        {
            <span>Not available</span>
        }
    }
}


@functions {
    void RenderSeatFeature(bool seatOptionWithFeature, bool seatOptionWithOptionalFeature, bool seatOptionWithoutFeature)
    {

        if (seatOptionWithFeature && !seatOptionWithOptionalFeature && !seatOptionWithoutFeature)
        {
            @Html.Raw("Standard")
        }
        else if (seatOptionWithFeature && seatOptionWithOptionalFeature && !seatOptionWithoutFeature)
        {
            @Html.Raw("Optional")
        }
        else if (seatOptionWithFeature && (seatOptionWithOptionalFeature || seatOptionWithoutFeature))
        {
            @Html.Raw("Optional")
        }
        else if (seatOptionWithOptionalFeature)
        {
            @Html.Raw("Optional")
        }
        else if (!seatOptionWithFeature && !seatOptionWithOptionalFeature && seatOptionWithoutFeature)
        {
            @Html.Raw("Not available")
        }
        else
        {
            @seatOptionWithFeature @seatOptionWithOptionalFeature @seatOptionWithoutFeature
        }
    }
}